"""
Django settings for teleblog project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import datetime
import configparser
import json
import sys
from mongoengine import connect

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = configparser.ConfigParser()
parent = os.path.split(os.path.abspath("."))[0]
os.environ['API_CONFIG_FILE'] = 'config.ini'
file = os.environ.get('API_CONFIG_FILE', None)
config_file = os.path.join(BASE_DIR, file)

if not config_file:
    print('Set API_CONFIG_FILE environment variable first')
    sys.exit(1)
else:
    config.read(config_file)

# mongodb variables
mongo_db_server = config.get('mongodb', 'host')
mongo_db_port = config.getint('mongodb', 'port')
mongo_db_name = config.get('mongodb', 'name')
mongo_db_user = config.get('mongodb', 'user')
mongo_db_pwd = config.get('mongodb', 'pwd')
mongo_db_auth = config.get('mongodb', 'auth')

# get keys
clearbit_key = config.get('keys', 'clearbit')
tel_key = config.get('keys', 'telegram')
emailhunter_key = config.get('keys', 'emailhunter')

# get activity vars
number_of_users = config.get('activity', 'number_of_users')
max_post_per_user = config.get('activity', 'max_post_per_user')
max_likes_per_user = config.get('activity', 'max_likes_per_user')
hooks = config.get('activity', 'hooks')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&&$z!h@7x079)$&w$*8u3f4hf()3d49(*-klf=zlydx6=26aq6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',

    'user',
    'post',
    'bot'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'teleblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'teleblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },

    'mongo': {
        'ENGINE': 'djongo',
        'NAME': 'teleblog-django-db',
    },
}

# SESSION_ENGINE = 'mongoengine.django.sessions' # optional

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


REST_USE_JWT = True

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',

    ),
}
JWT_AUTH = {
    # 'JWT_SECRET_KEY': SECRET_KEY,
    # 'JWT_VERIFY': True,
    # 'JWT_VERIFY_EXPIRATION': True,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_ALGORITHM': 'HS256',
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=28),
}

AUTH_USER_MODEL = 'user.User'

# connect to mongo
connect(mongo_db_name, host=mongo_db_server, port=mongo_db_port, username=mongo_db_user, password=mongo_db_pwd,
        authentication_source=mongo_db_auth)
